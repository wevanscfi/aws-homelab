#!/usr/bin/env bash
# This script was generated by bashly 1.0.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
tf_helper_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper - Terraform Helper Functions\n"
    echo

  else
    printf "tf-helper - Terraform Helper Functions\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper COMMAND\n"
  printf "  tf-helper [COMMAND] --help | -h\n"
  printf "  tf-helper --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Refresh all terraform docs\n" "docs         "
  printf "  %s   Clean up tfplan files in all root modules\n" "clean        "
  printf "  %s   Run terraform init in a root module\n" "init         "
  printf "  %s   Run terraform plan in a root module\n" "plan         "
  printf "  %s   Run terraform apply in a root module\n" "apply        "
  printf "  %s   Commands for interacting with root modules\n" "root-module  "
  printf "  %s   Commands for interacting with shared modules\n" "shared-module"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
tf_helper_docs_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper docs - Refresh all terraform docs\n"
    echo

  else
    printf "tf-helper docs - Refresh all terraform docs\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper docs\n"
  printf "  tf-helper docs --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tf-helper docs\n"
    echo

  fi
}

# :command.usage
tf_helper_clean_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper clean - Clean up tfplan files in all root modules\n"
    echo

  else
    printf "tf-helper clean - Clean up tfplan files in all root modules\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper clean\n"
  printf "  tf-helper clean --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tf-helper clean\n"
    echo

  fi
}

# :command.usage
tf_helper_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper init - Run terraform init in a root module\n"
    echo

  else
    printf "tf-helper init - Run terraform init in a root module\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper init NAME\n"
  printf "  tf-helper init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Root module name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tf-helper init cluster_services\n"
    echo

  fi
}

# :command.usage
tf_helper_plan_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper plan - Run terraform plan in a root module\n"
    echo

  else
    printf "tf-helper plan - Run terraform plan in a root module\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper plan NAME\n"
  printf "  tf-helper plan --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Root module name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tf-helper plan cluster_services\n"
    echo

  fi
}

# :command.usage
tf_helper_apply_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper apply - Run terraform apply in a root module\n"
    echo

  else
    printf "tf-helper apply - Run terraform apply in a root module\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper apply NAME\n"
  printf "  tf-helper apply --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Root module name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tf-helper plan cluster_services\n"
    echo

  fi
}

# :command.usage
tf_helper_root_module_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper root-module - Commands for interacting with root modules\n"
    echo

  else
    printf "tf-helper root-module - Commands for interacting with root modules\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper root-module COMMAND\n"
  printf "  tf-helper root-module [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create a new root module\n" "init"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
tf_helper_root_module_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper root-module init - Create a new root module\n"
    echo

  else
    printf "tf-helper root-module init - Create a new root module\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper root-module init NAME [OPTIONS]\n"
  printf "  tf-helper root-module init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--providers, -p PROVIDERS"
    printf "    A comma delinetated list of providers to link\n"
    printf "    Default: aws\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Root module name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tf-helper root-module init cluster_services\n"
    printf "  tf-helper root-module init rds_instances -p aws,honeycomb\n"
    echo

  fi
}

# :command.usage
tf_helper_shared_module_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper shared-module - Commands for interacting with shared modules\n"
    echo

  else
    printf "tf-helper shared-module - Commands for interacting with shared modules\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper shared-module COMMAND\n"
  printf "  tf-helper shared-module [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create a new shared module\n" "init"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
tf_helper_shared_module_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "tf-helper shared-module init - Create a new shared module\n"
    echo

  else
    printf "tf-helper shared-module init - Create a new shared module\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  tf-helper shared-module init NAME\n"
  printf "  tf-helper shared-module init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Module name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tf-helper shared-module init s3\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
tf_helper_docs_command() {
  # src/docs_command.sh
  parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
  dest=$(dirname ${parent_path})/terraform

  find ${dest} -type f -name 'main.tf' -not -path '*/.*' -execdir bash -c "terraform-docs markdown ./ > README.md" \;

}

# :command.function
tf_helper_clean_command() {
  # src/clean_command.sh
  parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
  dest=${parent_path}/../terraform/root-modules

  for dir in ${dest}/*
  do
    test -d "$dir" || continue
    cd ${dir}
    echo $PWD
    rm -f tfplan
  done

}

# :command.function
tf_helper_init_command() {
  # src/init_command.sh
  parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
  dest=${parent_path}/../terraform/root-modules/${args[name]}

  cd $dest
  terraform init -upgrade

}

# :command.function
tf_helper_plan_command() {
  # src/plan_command.sh
  parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
  dest=${parent_path}/../terraform/root-modules/${args[name]}

  cd $dest
  terraform plan -out=tfplan

}

# :command.function
tf_helper_apply_command() {
  # src/apply_command.sh
  parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
  dest=${parent_path}/../terraform/root-modules/${args[name]}

  cd $dest
  terraform apply tfplan && rm tfplan

}

# :command.function
tf_helper_root_module_init_command() {
  # src/root_module_init_command.sh
  parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
  template=${parent_path}/../terraform/templates/root-module
  dest=${parent_path}/../terraform/root-modules/${args[name]}

  echo "Creating a new terraform root module: ${args[name]}"

  cp -a ${template} ${dest}
  sed -i "" "s/<module_name>/${args[name]}/g" $dest/backend.tf

  for provider in $(echo ${args[--providers]} | sed "s/,/ /g"); do
    echo "Using provider ${provider} in new module"
    cd $dest
    ln -s ../../providers/${provider}.tf ${provider}.tf
  done

}

# :command.function
tf_helper_shared_module_init_command() {
  # src/shared_module_init_command.sh
  parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
  template=${parent_path}/../terraform/templates/shared-module
  dest=${parent_path}/../terraform/shared-modules/${args[name]}

  echo "Creating a new terraform shared module at ${dest} from template"

  cp -a ${template} ${dest}

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        tf_helper_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    docs)
      action="docs"
      shift
      tf_helper_docs_parse_requirements "$@"
      shift $#
      ;;

    clean)
      action="clean"
      shift
      tf_helper_clean_parse_requirements "$@"
      shift $#
      ;;

    init)
      action="init"
      shift
      tf_helper_init_parse_requirements "$@"
      shift $#
      ;;

    plan)
      action="plan"
      shift
      tf_helper_plan_parse_requirements "$@"
      shift $#
      ;;

    apply)
      action="apply"
      shift
      tf_helper_apply_parse_requirements "$@"
      shift $#
      ;;

    root-module)
      action="root-module"
      shift
      tf_helper_root_module_parse_requirements "$@"
      shift $#
      ;;

    shared-module)
      action="shared-module"
      shift
      tf_helper_shared_module_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      tf_helper_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
tf_helper_docs_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tf_helper_docs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="docs"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
tf_helper_clean_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tf_helper_clean_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="clean"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
tf_helper_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tf_helper_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: tf-helper init NAME\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
tf_helper_plan_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tf_helper_plan_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="plan"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: tf-helper plan NAME\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
tf_helper_apply_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tf_helper_apply_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="apply"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: tf-helper apply NAME\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
tf_helper_root_module_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tf_helper_root_module_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      tf_helper_root_module_init_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      tf_helper_root_module_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
tf_helper_root_module_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tf_helper_root_module_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="root-module init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --providers | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--providers']="$2"
          shift
          shift
        else
          printf "%s\n" "--providers requires an argument: --providers, -p PROVIDERS" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: tf-helper root-module init NAME [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--providers']:-} ]] || args['--providers']="aws"

}

# :command.parse_requirements
tf_helper_shared_module_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tf_helper_shared_module_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      tf_helper_shared_module_init_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      tf_helper_shared_module_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
tf_helper_shared_module_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        tf_helper_shared_module_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="shared-module init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: tf-helper shared-module init NAME\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "docs")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        tf_helper_docs_usage
      else
        tf_helper_docs_command
      fi
      ;;

    "clean")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        tf_helper_clean_usage
      else
        tf_helper_clean_command
      fi
      ;;

    "init")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        tf_helper_init_usage
      else
        tf_helper_init_command
      fi
      ;;

    "plan")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        tf_helper_plan_usage
      else
        tf_helper_plan_command
      fi
      ;;

    "apply")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        tf_helper_apply_usage
      else
        tf_helper_apply_command
      fi
      ;;

    "root-module")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        tf_helper_root_module_usage
      else
        tf_helper_root_module_command
      fi
      ;;

    "root-module init")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        tf_helper_root_module_init_usage
      else
        tf_helper_root_module_init_command
      fi
      ;;

    "shared-module")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        tf_helper_shared_module_usage
      else
        tf_helper_shared_module_command
      fi
      ;;

    "shared-module init")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        tf_helper_shared_module_init_usage
      else
        tf_helper_shared_module_init_command
      fi
      ;;

  esac
}

initialize
run "$@"
